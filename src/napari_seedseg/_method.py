import numpy as np
from typing import Optional, Tuple, List
from dataclasses import dataclass
import skimage
import cv2


class Method():
    """
    A class to represent the method using for segmentation.
    We use skimage.segmentation.flood for this aim. 

    Attributes
    ----------
    _image : np.ndarray
        The input image.
    _tolerance : float, optional, default: 10
        The tolerance for the segmentation algorithm.
    _mask : np.ndarray
        The mask generated by the algorithm.
    _contour : np.ndarray
        The contour of the selected region.

    Methods
    -------
    compute(position: Tuple[int, int] = None) -> None
        Computes the mask and contour based on the provided position.
    assert_position(position: Tuple[int, int]) -> None
        Asserts position is a tuple of integers.
    update_tolerance(self, value: float) -> None
        Updates the tolerance value.
    reset() -> None
        Resets the mask and contour.
    """

    def __init__(self, _image: np.ndarray, _tolerance: int = 10, **kwargs):
        super().__init__()
        self._image = _image
        self._tolerance = _tolerance
        self._mask, self._contour = np.zeros_like(_image), np.zeros_like(_image)

    def compute(self, position: Tuple[int, int] = None) -> None:
        """
        Computes the mask and contour based on the mouse position in real-time.

        Parameters
        ----------
        position : Tuple[int, int], optional, default: None
            The position of the region of interest.
        """

        self.assert_position(position)
        self.reset()

        selected_mask = skimage.segmentation.flood(self._image, position, tolerance = self._tolerance).astype(np.uint8)
        contours, _ = cv2.findContours(selected_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        largest_contour = max(contours, key=cv2.contourArea).astype(int)
        self._contour = cv2.drawContours(np.zeros_like(self._image), [largest_contour], -1, 1, 2)
        self._mask = cv2.fillPoly(np.zeros_like(self._image), [largest_contour], 1)


    @staticmethod
    def assert_position(position: Tuple[int, int]) -> None:
        """
        Asserts position is a tuple of integers.

        Parameters
        ----------
        position : Tuple[int, int]
            The position to be checked.

        Raises
        ------
        TypeError
            If position is not a tuple or its values are not integers.
        """

        if not isinstance(position, tuple):
            raise TypeError('`position` must be a tuple.')
        if not (isinstance(position[0], int) and isinstance(position[1], int)):
            raise TypeError('`position` values must be integers.')


    def update_tolerance(self, value: float) -> None:
        """
        Updates the tolerance value.

        Parameters
        ----------
        value : float
            The new tolerance value to set.
        """
        
        self._tolerance = value

    
    def reset(self) -> None:
        """
        Resets the contour when mouse moves.
        """
        
        self._contour[:] = 0

    
